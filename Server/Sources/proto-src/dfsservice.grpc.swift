//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: dfsservice.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `DFSServiceClient`, then call methods of this protocol to make API calls.
internal protocol DFSServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: DFSServiceClientInterceptorFactoryProtocol? { get }

  func lock(
    _ request: FileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FileRequest, EmptyResponse>

  func store(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<FileRequest, FileContent>

  func fetch(
    _ request: FileRequest,
    callOptions: CallOptions?,
    handler: @escaping (FileContent) -> Void
  ) -> ServerStreamingCall<FileRequest, FileContent>

  func delete(
    _ request: FileRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<FileRequest, EmptyResponse>

  func pubSubFileEvents(
    _ request: EmptyResponse,
    callOptions: CallOptions?
  ) -> UnaryCall<EmptyResponse, FilesList>
}

extension DFSServiceClientProtocol {
  internal var serviceName: String {
    return "DFSService"
  }

  /// Unary call to Lock
  ///
  /// - Parameters:
  ///   - request: Request to send to Lock.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func lock(
    _ request: FileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FileRequest, EmptyResponse> {
    return self.makeUnaryCall(
      path: DFSServiceClientMetadata.Methods.lock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockInterceptors() ?? []
    )
  }

  /// Client streaming call to Store
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func store(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<FileRequest, FileContent> {
    return self.makeClientStreamingCall(
      path: DFSServiceClientMetadata.Methods.store.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreInterceptors() ?? []
    )
  }

  /// Server streaming call to Fetch
  ///
  /// - Parameters:
  ///   - request: Request to send to Fetch.
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ServerStreamingCall` with futures for the metadata and status.
  internal func fetch(
    _ request: FileRequest,
    callOptions: CallOptions? = nil,
    handler: @escaping (FileContent) -> Void
  ) -> ServerStreamingCall<FileRequest, FileContent> {
    return self.makeServerStreamingCall(
      path: DFSServiceClientMetadata.Methods.fetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to Delete
  ///
  /// - Parameters:
  ///   - request: Request to send to Delete.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func delete(
    _ request: FileRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<FileRequest, EmptyResponse> {
    return self.makeUnaryCall(
      path: DFSServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  /// Unary call to PubSubFileEvents
  ///
  /// - Parameters:
  ///   - request: Request to send to PubSubFileEvents.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func pubSubFileEvents(
    _ request: EmptyResponse,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<EmptyResponse, FilesList> {
    return self.makeUnaryCall(
      path: DFSServiceClientMetadata.Methods.pubSubFileEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePubSubFileEventsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension DFSServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "DFSServiceNIOClient")
internal final class DFSServiceClient: DFSServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: DFSServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: DFSServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the DFSService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DFSServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct DFSServiceNIOClient: DFSServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: DFSServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the DFSService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DFSServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol DFSServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: DFSServiceClientInterceptorFactoryProtocol? { get }

  func makeLockCall(
    _ request: FileRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FileRequest, EmptyResponse>

  func makeStoreCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<FileRequest, FileContent>

  func makeFetchCall(
    _ request: FileRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncServerStreamingCall<FileRequest, FileContent>

  func makeDeleteCall(
    _ request: FileRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<FileRequest, EmptyResponse>

  func makePubSubFileEventsCall(
    _ request: EmptyResponse,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<EmptyResponse, FilesList>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DFSServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return DFSServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: DFSServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeLockCall(
    _ request: FileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FileRequest, EmptyResponse> {
    return self.makeAsyncUnaryCall(
      path: DFSServiceClientMetadata.Methods.lock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockInterceptors() ?? []
    )
  }

  internal func makeStoreCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<FileRequest, FileContent> {
    return self.makeAsyncClientStreamingCall(
      path: DFSServiceClientMetadata.Methods.store.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreInterceptors() ?? []
    )
  }

  internal func makeFetchCall(
    _ request: FileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncServerStreamingCall<FileRequest, FileContent> {
    return self.makeAsyncServerStreamingCall(
      path: DFSServiceClientMetadata.Methods.fetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchInterceptors() ?? []
    )
  }

  internal func makeDeleteCall(
    _ request: FileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<FileRequest, EmptyResponse> {
    return self.makeAsyncUnaryCall(
      path: DFSServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  internal func makePubSubFileEventsCall(
    _ request: EmptyResponse,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<EmptyResponse, FilesList> {
    return self.makeAsyncUnaryCall(
      path: DFSServiceClientMetadata.Methods.pubSubFileEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePubSubFileEventsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DFSServiceAsyncClientProtocol {
  internal func lock(
    _ request: FileRequest,
    callOptions: CallOptions? = nil
  ) async throws -> EmptyResponse {
    return try await self.performAsyncUnaryCall(
      path: DFSServiceClientMetadata.Methods.lock.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLockInterceptors() ?? []
    )
  }

  internal func store<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> FileContent where RequestStream: Sequence, RequestStream.Element == FileRequest {
    return try await self.performAsyncClientStreamingCall(
      path: DFSServiceClientMetadata.Methods.store.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreInterceptors() ?? []
    )
  }

  internal func store<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> FileContent where RequestStream: AsyncSequence & Sendable, RequestStream.Element == FileRequest {
    return try await self.performAsyncClientStreamingCall(
      path: DFSServiceClientMetadata.Methods.store.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeStoreInterceptors() ?? []
    )
  }

  internal func fetch(
    _ request: FileRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<FileContent> {
    return self.performAsyncServerStreamingCall(
      path: DFSServiceClientMetadata.Methods.fetch.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFetchInterceptors() ?? []
    )
  }

  internal func delete(
    _ request: FileRequest,
    callOptions: CallOptions? = nil
  ) async throws -> EmptyResponse {
    return try await self.performAsyncUnaryCall(
      path: DFSServiceClientMetadata.Methods.delete.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeDeleteInterceptors() ?? []
    )
  }

  internal func pubSubFileEvents(
    _ request: EmptyResponse,
    callOptions: CallOptions? = nil
  ) async throws -> FilesList {
    return try await self.performAsyncUnaryCall(
      path: DFSServiceClientMetadata.Methods.pubSubFileEvents.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makePubSubFileEventsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct DFSServiceAsyncClient: DFSServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: DFSServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: DFSServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol DFSServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'lock'.
  func makeLockInterceptors() -> [ClientInterceptor<FileRequest, EmptyResponse>]

  /// - Returns: Interceptors to use when invoking 'store'.
  func makeStoreInterceptors() -> [ClientInterceptor<FileRequest, FileContent>]

  /// - Returns: Interceptors to use when invoking 'fetch'.
  func makeFetchInterceptors() -> [ClientInterceptor<FileRequest, FileContent>]

  /// - Returns: Interceptors to use when invoking 'delete'.
  func makeDeleteInterceptors() -> [ClientInterceptor<FileRequest, EmptyResponse>]

  /// - Returns: Interceptors to use when invoking 'pubSubFileEvents'.
  func makePubSubFileEventsInterceptors() -> [ClientInterceptor<EmptyResponse, FilesList>]
}

internal enum DFSServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DFSService",
    fullName: "DFSService",
    methods: [
      DFSServiceClientMetadata.Methods.lock,
      DFSServiceClientMetadata.Methods.store,
      DFSServiceClientMetadata.Methods.fetch,
      DFSServiceClientMetadata.Methods.delete,
      DFSServiceClientMetadata.Methods.pubSubFileEvents,
    ]
  )

  internal enum Methods {
    internal static let lock = GRPCMethodDescriptor(
      name: "Lock",
      path: "/DFSService/Lock",
      type: GRPCCallType.unary
    )

    internal static let store = GRPCMethodDescriptor(
      name: "Store",
      path: "/DFSService/Store",
      type: GRPCCallType.clientStreaming
    )

    internal static let fetch = GRPCMethodDescriptor(
      name: "Fetch",
      path: "/DFSService/Fetch",
      type: GRPCCallType.serverStreaming
    )

    internal static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/DFSService/Delete",
      type: GRPCCallType.unary
    )

    internal static let pubSubFileEvents = GRPCMethodDescriptor(
      name: "PubSubFileEvents",
      path: "/DFSService/PubSubFileEvents",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol DFSServiceProvider: CallHandlerProvider {
  var interceptors: DFSServiceServerInterceptorFactoryProtocol? { get }

  func lock(request: FileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EmptyResponse>

  func store(context: UnaryResponseCallContext<FileContent>) -> EventLoopFuture<(StreamEvent<FileRequest>) -> Void>

  func fetch(request: FileRequest, context: StreamingResponseCallContext<FileContent>) -> EventLoopFuture<GRPCStatus>

  func delete(request: FileRequest, context: StatusOnlyCallContext) -> EventLoopFuture<EmptyResponse>

  func pubSubFileEvents(request: EmptyResponse, context: StatusOnlyCallContext) -> EventLoopFuture<FilesList>
}

extension DFSServiceProvider {
  internal var serviceName: Substring {
    return DFSServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Lock":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileRequest>(),
        responseSerializer: ProtobufSerializer<EmptyResponse>(),
        interceptors: self.interceptors?.makeLockInterceptors() ?? [],
        userFunction: self.lock(request:context:)
      )

    case "Store":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileRequest>(),
        responseSerializer: ProtobufSerializer<FileContent>(),
        interceptors: self.interceptors?.makeStoreInterceptors() ?? [],
        observerFactory: self.store(context:)
      )

    case "Fetch":
      return ServerStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileRequest>(),
        responseSerializer: ProtobufSerializer<FileContent>(),
        interceptors: self.interceptors?.makeFetchInterceptors() ?? [],
        userFunction: self.fetch(request:context:)
      )

    case "Delete":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileRequest>(),
        responseSerializer: ProtobufSerializer<EmptyResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        userFunction: self.delete(request:context:)
      )

    case "PubSubFileEvents":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EmptyResponse>(),
        responseSerializer: ProtobufSerializer<FilesList>(),
        interceptors: self.interceptors?.makePubSubFileEventsInterceptors() ?? [],
        userFunction: self.pubSubFileEvents(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol DFSServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: DFSServiceServerInterceptorFactoryProtocol? { get }

  func lock(
    request: FileRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> EmptyResponse

  func store(
    requestStream: GRPCAsyncRequestStream<FileRequest>,
    context: GRPCAsyncServerCallContext
  ) async throws -> FileContent

  func fetch(
    request: FileRequest,
    responseStream: GRPCAsyncResponseStreamWriter<FileContent>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func delete(
    request: FileRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> EmptyResponse

  func pubSubFileEvents(
    request: EmptyResponse,
    context: GRPCAsyncServerCallContext
  ) async throws -> FilesList
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension DFSServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return DFSServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return DFSServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: DFSServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Lock":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileRequest>(),
        responseSerializer: ProtobufSerializer<EmptyResponse>(),
        interceptors: self.interceptors?.makeLockInterceptors() ?? [],
        wrapping: { try await self.lock(request: $0, context: $1) }
      )

    case "Store":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileRequest>(),
        responseSerializer: ProtobufSerializer<FileContent>(),
        interceptors: self.interceptors?.makeStoreInterceptors() ?? [],
        wrapping: { try await self.store(requestStream: $0, context: $1) }
      )

    case "Fetch":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileRequest>(),
        responseSerializer: ProtobufSerializer<FileContent>(),
        interceptors: self.interceptors?.makeFetchInterceptors() ?? [],
        wrapping: { try await self.fetch(request: $0, responseStream: $1, context: $2) }
      )

    case "Delete":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<FileRequest>(),
        responseSerializer: ProtobufSerializer<EmptyResponse>(),
        interceptors: self.interceptors?.makeDeleteInterceptors() ?? [],
        wrapping: { try await self.delete(request: $0, context: $1) }
      )

    case "PubSubFileEvents":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<EmptyResponse>(),
        responseSerializer: ProtobufSerializer<FilesList>(),
        interceptors: self.interceptors?.makePubSubFileEventsInterceptors() ?? [],
        wrapping: { try await self.pubSubFileEvents(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol DFSServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'lock'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLockInterceptors() -> [ServerInterceptor<FileRequest, EmptyResponse>]

  /// - Returns: Interceptors to use when handling 'store'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeStoreInterceptors() -> [ServerInterceptor<FileRequest, FileContent>]

  /// - Returns: Interceptors to use when handling 'fetch'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFetchInterceptors() -> [ServerInterceptor<FileRequest, FileContent>]

  /// - Returns: Interceptors to use when handling 'delete'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeDeleteInterceptors() -> [ServerInterceptor<FileRequest, EmptyResponse>]

  /// - Returns: Interceptors to use when handling 'pubSubFileEvents'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makePubSubFileEventsInterceptors() -> [ServerInterceptor<EmptyResponse, FilesList>]
}

internal enum DFSServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "DFSService",
    fullName: "DFSService",
    methods: [
      DFSServiceServerMetadata.Methods.lock,
      DFSServiceServerMetadata.Methods.store,
      DFSServiceServerMetadata.Methods.fetch,
      DFSServiceServerMetadata.Methods.delete,
      DFSServiceServerMetadata.Methods.pubSubFileEvents,
    ]
  )

  internal enum Methods {
    internal static let lock = GRPCMethodDescriptor(
      name: "Lock",
      path: "/DFSService/Lock",
      type: GRPCCallType.unary
    )

    internal static let store = GRPCMethodDescriptor(
      name: "Store",
      path: "/DFSService/Store",
      type: GRPCCallType.clientStreaming
    )

    internal static let fetch = GRPCMethodDescriptor(
      name: "Fetch",
      path: "/DFSService/Fetch",
      type: GRPCCallType.serverStreaming
    )

    internal static let delete = GRPCMethodDescriptor(
      name: "Delete",
      path: "/DFSService/Delete",
      type: GRPCCallType.unary
    )

    internal static let pubSubFileEvents = GRPCMethodDescriptor(
      name: "PubSubFileEvents",
      path: "/DFSService/PubSubFileEvents",
      type: GRPCCallType.unary
    )
  }
}
